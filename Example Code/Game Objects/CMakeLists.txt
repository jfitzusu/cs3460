cmake_minimum_required(VERSION 3.12)
project(Inheritance)

#
# Manually specifying all the source files.
#
set(SOURCE_FILES
    Entity.hpp
    Entity.cpp
    Monster.hpp
    Monster.cpp
    Vehicle.hpp
    Vehicle.cpp
    main.cpp)

#
# This is the main target
#
add_executable(Inheritance ${SOURCE_FILES})

#
# We want the C++ 20 standard for our project
#
set_property(TARGET Inheritance PROPERTY CXX_STANDARD 20)

#
# Prepare a pre-build step to run clang-format over all the [ch]pp source files.
# Start by finding the location of the clang-format executable.
#
find_program(CLANG_FORMAT "clang-format")
if (CLANG_FORMAT)
    message("Clang-Format found at: " ${CLANG_FORMAT})

    #
    # Need to take the simple source file locations used for the project and get their full
    # file system locations for use in putting together the clang-format command line
    #
    unset(SOURCE_FILES_PATHS)
    foreach(SOURCE_FILE ${SOURCE_FILES})
        get_source_file_property(WHERE ${SOURCE_FILE} LOCATION)
        set(SOURCE_FILES_PATHS ${SOURCE_FILES_PATHS} ${WHERE})
    endforeach()

    #
    # This creates the clang-format target/command
    #
    add_custom_target(
        ClangFormat
        COMMAND ${CLANG_FORMAT}
        -i
        -style=file
        ${SOURCE_FILES_PATHS}
    )
    #
    # This makes the clang-format target a dependency of the main Inheritance project
    #
    add_dependencies(Inheritance ClangFormat)
else()
    message("Unable to find clang-format")
endif()
